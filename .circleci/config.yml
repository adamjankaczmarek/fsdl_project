version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  docker: circleci/docker@1.6.0

workflows:
  sample:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-and-test

jobs:
  build-and-test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    environment:
      IMAGE_NAME: szybkiadas/fsdl_serving
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - run:
          name: Install Deps
          command: |
            docker --version
            sudo apt-get update
            sudo apt-get install portaudio19-dev
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}
      - python/install-packages:
          pkg-manager: poetry
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
      - run:
          name: Config GDrive Access
          command: |
            mkdir -p ./.dvc/tmp
            echo $GDRIVE_CREDENTIALS > ./.dvc/tmp/gdrive-user-credentials.json
      - restore_cache:
          keys:
          - deps-{{ checksum "./models/wav2vec_kws/best.ckpt.dvc" }}
      - run:
          name: Run DVC
          # This assumes pytest is installed via the install-package step above
          command: |
            poetry run dvc pull ./models/wav2vec_kws/best.ckpt.dvc
            poetry run dvc pull ./resources/models/pretrained/wav2vec_small.pt.dvc
      - save_cache:
          key: deps-{{ checksum "./models/wav2vec_kws/best.ckpt.dvc" }}
          paths:
            - "./models"
      # - restore_cache:
      #     keys:
      #       - deps-{{ checksum "./kws.mar" }}
      - run: 
          name: Build MAR Archive
          command: |
            mkdir -p ./app/deployment/serving/model_store
            poetry run torch-model-archiver --model-name kws --version 0.1 --serialized-file ./resources/models/pretrained/wav2vec_small.pt --model-file ./models/wav2vec_kws/best.ckpt --handler ./app/deployment/serving/handlers/handler.py --extra-files="./src/models/wav2keyword.py" --export-path ./app/deployment/serving/model_store --force
      # - save_cache:
      #     key: deps-{{ checksum "./kws.mar" }}
      #     paths:
      #       - "./kws.mar"
      - store_artifacts:
          path: ./kws.mar
          destination: model-package
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            cd ./app/deployment/serving
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME:latest